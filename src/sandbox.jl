## Initialize 
using Pkg
Pkg.status()


Pkg.activate(dirname(@__DIR__))

####################################################################
include("MODEL\\Model.jl")   ; using .Model 
mod = build_model(6)

mod.n_stocks
mod.Data_matrix
mod.moment_matrices
mod.f‚ÇÅ‚Çò‚Çê‚Çì
mod.f‚ÇÇ‚Çò·µ¢‚Çô

####################################################################

include("POP\\POP.jl")   ; using .POP

sk_mat = mod.moment_matrices["skewness_matrix"]
kur_mat = mod.moment_matrices["kurtosis_matrix"]

sk_df = POP.get_POP_estimates(sk_mat,3:8)
kur_df = POP.get_POP_estimates(kur_mat,4:8)






df

# obj_val, p_stat, d_stat, sol_t =


####################################################################

include("grid_search.jl")  ; using .grid_search 





## Code Health check

objective_functions.run_tests()
grid_search.run_tests()
using_SumOfSquares.run_tests()
  

## Estimating f‚ÇÉ‚Çò‚Çê‚Çì and f‚ÇÑ‚Çò·µ¢‚Çô 
f‚ÇÉ  = get_f‚ÇÉ(skewness_matrix)
f‚ÇÑ  = get_f‚ÇÑ(kurtosis_matrix)
### Towards lower bounds of 

# via Grid search
r = 4
hat_f‚ÇÉ‚Çò‚Çê‚Çì = grid_search.max(f‚ÇÉ,n,r)
hat_f‚ÇÑ‚Çò·µ¢‚Çô = grid_search.min(f‚ÇÑ,n,r)
# via interior point line search filter method

# via multi multi-start (TODO)

# via particle swarm (TODO)

## Towards upper bounds of 
# via SumsOfSquares.jl
tilde_f‚ÇÉ‚Çò‚Çê‚Çì = -using_SumOfSquares.get_SOS_bound((-1)*skewness_matrix,3)
tilde_f‚ÇÑ‚Çò·µ¢‚Çô = maximum([using_SumOfSquares.get_SOS_bound(kurtosiss_matrix,6),1e-16]) # WARNING: somewhat arbitary value
# via (my coded) Lasser Hierarchy (there are some complications)
# include("POP\\Lasserre_hier\\Lasserre_bound.jl")
# using .Lasserre_bound 
# Lasserre_bound.get_Lasserre_bound(-skewness_matrix,3)


## Bounding funcitons for ùíª:
Œª = [0.25,0.25,0.25,0.25]
f_opts = f‚ÇÅ‚Çò‚Çê‚Çì, f‚ÇÇ‚Çò·µ¢‚Çô, tilde_f‚ÇÉ‚Çò‚Çê‚Çì, tilde_f‚ÇÑ‚Çò·µ¢‚Çô
tilde_ùíª = objective_functions.get_ùíª(Œª, f_opts, R)

a = [1,1,1,1,1,1]/6
b = [0,0,0,0,0,0]
tilde_ùíª(a)

œï = f‚ÇÅ‚Çò‚Çê‚Çì,f‚ÇÇ‚Çò·µ¢‚Çô,tilde_f‚ÇÉ‚Çò‚Çê‚Çì,tilde_f‚ÇÑ‚Çò·µ¢‚Çô
f‚ÇÅ  = Data_moments.get_f‚ÇÅ(R); f‚ÇÇ  = Data_moments.get_f‚ÇÇ(R); f‚ÇÉ  = Data_moments.get_f‚ÇÉ(R); f‚ÇÑ  = Data_moments.get_f‚ÇÑ(R) 
function ùíª(x)
    if f‚ÇÉ(x) ‚â§ œï[3] && f‚ÇÑ(x) ‚â• œï[4] 
        return (1 - (f‚ÇÅ(x)/œï[1]))^Œª[1] + ((f‚ÇÇ(x)/œï[2]) - 1)^Œª[2] + (1 - (f‚ÇÉ(x)/œï[3]))^Œª[3] + ((f‚ÇÑ(x)/œï[4]) - 1)^Œª[4] 
    else 
        return 0
    end
end

### Lower bounding function
hat_œï = f‚ÇÅ‚Çò‚Çê‚Çì,f‚ÇÇ‚Çò·µ¢‚Çô,tilde_f‚ÇÉ‚Çò‚Çê‚Çì,tilde_f‚ÇÑ‚Çò·µ¢‚Çô
hat_ùíª = Data_moments.get_ùíª(Œª,hat_œï,R)


ùíª(a)
